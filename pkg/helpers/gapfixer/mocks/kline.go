// Code generated by MockGen. DO NOT EDIT.
// Source: kline.go
//
// Generated by this command:
//
//	mockgen -source=kline.go -destination=mocks/kline.go
//

// Package mock_gapfixer is a generated GoMock package.
package mock_gapfixer

import (
	context "context"
	models "crypto_bot/pkg/exchange/models"
	pgdb "crypto_bot/pkg/storage/pgdb"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
	isgomock struct{}
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// Klines mocks base method.
func (m *MockExchange) Klines(arg0 context.Context, arg1 models.KlinesRequest) ([]*models.Kline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Klines", arg0, arg1)
	ret0, _ := ret[0].([]*models.Kline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Klines indicates an expected call of Klines.
func (mr *MockExchangeMockRecorder) Klines(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Klines", reflect.TypeOf((*MockExchange)(nil).Klines), arg0, arg1)
}

// WsKlines mocks base method.
func (m *MockExchange) WsKlines(arg0 context.Context, arg1 models.WsKlineRequest) (<-chan *models.WsKlineEvent, <-chan error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WsKlines", arg0, arg1)
	ret0, _ := ret[0].(<-chan *models.WsKlineEvent)
	ret1, _ := ret[1].(<-chan error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WsKlines indicates an expected call of WsKlines.
func (mr *MockExchangeMockRecorder) WsKlines(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WsKlines", reflect.TypeOf((*MockExchange)(nil).WsKlines), arg0, arg1)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// ReadKlines mocks base method.
func (m *MockStorage) ReadKlines(arg0 context.Context, arg1 pgdb.ReadKlinesRequest) ([]*pgdb.Kline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadKlines", arg0, arg1)
	ret0, _ := ret[0].([]*pgdb.Kline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadKlines indicates an expected call of ReadKlines.
func (mr *MockStorageMockRecorder) ReadKlines(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadKlines", reflect.TypeOf((*MockStorage)(nil).ReadKlines), arg0, arg1)
}

// WriteKlines mocks base method.
func (m *MockStorage) WriteKlines(arg0 context.Context, arg1 pgdb.WriteKlinesRequest) ([]*pgdb.Kline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteKlines", arg0, arg1)
	ret0, _ := ret[0].([]*pgdb.Kline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteKlines indicates an expected call of WriteKlines.
func (mr *MockStorageMockRecorder) WriteKlines(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteKlines", reflect.TypeOf((*MockStorage)(nil).WriteKlines), arg0, arg1)
}
